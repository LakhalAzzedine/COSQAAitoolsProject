
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { getToolEndpointUrl, buildPromptWithContext } from "@/config/backendConfig";
import { defaultEndpointConfig } from "@/config/backendConfig";

export function useKarateGeneration() {
  const [generatedScripts, setGeneratedScripts] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isAutoGenerating, setIsAutoGenerating] = useState(false);
  const [showScriptsModal, setShowScriptsModal] = useState(false);
  const { toast } = useToast();

  const handleAutoGenerateFromJira = async (jiraData: any) => {
    if (!jiraData) {
      toast({
        title: "Error",
        description: "No JIRA data available for auto-generation.",
        variant: "destructive",
      });
      return;
    }

    setIsAutoGenerating(true);
    try {
      const savedConfig = localStorage.getItem("qaToolsEndpointConfig");
      let config = defaultEndpointConfig;
      
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        config = { ...defaultEndpointConfig, ...parsedConfig };
      }

      const jiraEndpointUrl = getToolEndpointUrl("jira-integration", config);
      
      console.log(`Fetching API specs from JIRA for ${jiraData.id || jiraData.key}`);
      
      const jiraResponse = await fetch(jiraEndpointUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: "fetchApiSpecs",
          jiraId: jiraData.id || jiraData.key || '',
          toolId: "karate-script-writer"
        })
      });
      
      if (!jiraResponse.ok) {
        throw new Error(`JIRA API error! status: ${jiraResponse.status}`);
      }
      
      const jiraResult = await jiraResponse.json();
      
      const endpointUrl = getToolEndpointUrl("karate-script-writer", config);
      const enhancedJiraData = {
        ...jiraData,
        apiSpecs: jiraResult.apiSpecs || jiraResult.data || {}
      };
      
      const prompt = buildPromptWithContext("karate-script-writer", 
        `Auto-generate Karate API test scripts from JIRA story`, 
        enhancedJiraData
      );
      
      console.log(`Auto-generating Karate scripts via ${endpointUrl}`);
      
      const response = await fetch(endpointUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: prompt,
          scriptRequirements: `Auto-generated from JIRA story: ${jiraData.title || jiraData.summary || ''}`,
          toolId: "karate-script-writer",
          jiraId: jiraData.id || jiraData.key || '',
          jiraData: enhancedJiraData,
          autoGenerated: true
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log("Karate script generation response:", result);
      
      const scriptsText = result.response || result.scripts || result.data?.response || result.data?.scripts || "No Karate scripts generated";
      
      console.log("Setting generated scripts:", scriptsText);
      setGeneratedScripts(scriptsText);
      
      // Force the modal to show with a slight delay to ensure state is updated
      setTimeout(() => {
        console.log("Opening scripts modal");
        setShowScriptsModal(true);
      }, 100);
      
      toast({
        title: "Auto-Generated Karate Scripts",
        description: "Karate API test scripts have been automatically generated",
      });
      
    } catch (error) {
      console.error('Error auto-generating Karate scripts from JIRA:', error);
      toast({
        title: "Error",
        description: "Could not auto-generate Karate scripts from JIRA. Check your backend configuration and connection.",
        variant: "destructive",
      });
    } finally {
      setIsAutoGenerating(false);
    }
  };

  const handleGenerateScripts = async (jiraStoryId: string, importedFiles: File[]) => {
    if (!jiraStoryId.trim() && importedFiles.length === 0) {
      toast({
        title: "Error",
        description: "Please enter a JIRA Story ID or import files to generate Karate scripts.",
        variant: "destructive",
      });
      return;
    }
    
    setIsLoading(true);
    try {
      const savedConfig = localStorage.getItem("qaToolsEndpointConfig");
      let config = defaultEndpointConfig;
      
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        config = { ...defaultEndpointConfig, ...parsedConfig };
      }

      let enhancedJiraData = null;
      
      if (jiraStoryId.trim()) {
        const jiraEndpointUrl = getToolEndpointUrl("jira-integration", config);
        
        console.log(`Fetching API specs from JIRA for story: ${jiraStoryId}`);
        
        const jiraResponse = await fetch(jiraEndpointUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: "fetchApiSpecs",
            jiraId: jiraStoryId,
            toolId: "karate-script-writer"
          })
        });
        
        if (!jiraResponse.ok) {
          throw new Error(`JIRA API error! status: ${jiraResponse.status}`);
        }
        
        const jiraResult = await jiraResponse.json();
        
        enhancedJiraData = {
          id: jiraStoryId,
          title: jiraResult.title || jiraResult.summary || `Story ${jiraStoryId}`,
          description: jiraResult.description || '',
          apiSpecs: jiraResult.apiSpecs || jiraResult.data || {}
        };
      }

      const endpointUrl = getToolEndpointUrl("karate-script-writer", config);
      const prompt = buildPromptWithContext("karate-script-writer", 
        jiraStoryId ? `Generate Karate API test scripts from JIRA story ${jiraStoryId}` : "Generate Karate scripts from uploaded files", 
        enhancedJiraData
      );
      
      let requestBody;
      let headers: Record<string, string> = {};
      
      if (importedFiles.length > 0) {
        const formData = new FormData();
        formData.append('prompt', prompt);
        formData.append('scriptRequirements', jiraStoryId ? `JIRA Story: ${jiraStoryId}` : "From uploaded files");
        formData.append('toolId', "karate-script-writer");
        
        importedFiles.forEach((file, index) => {
          formData.append(`file_${index}`, file);
        });
        
        if (enhancedJiraData) {
          formData.append('jiraId', enhancedJiraData.id);
          formData.append('jiraData', JSON.stringify(enhancedJiraData));
        }
        
        requestBody = formData;
      } else {
        headers['Content-Type'] = 'application/json';
        requestBody = JSON.stringify({
          prompt: prompt,
          scriptRequirements: jiraStoryId ? `JIRA Story: ${jiraStoryId}` : "Generate Karate scripts",
          toolId: "karate-script-writer",
          jiraId: enhancedJiraData?.id || '',
          jiraData: enhancedJiraData
        });
      }
      
      const response = await fetch(endpointUrl, {
        method: 'POST',
        headers: headers,
        body: requestBody
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log("Karate script generation response:", result);
      
      const scriptsText = result.response || result.scripts || result.data?.response || result.data?.scripts || "No Karate scripts generated";
      
      console.log("Setting generated scripts:", scriptsText);
      setGeneratedScripts(scriptsText);
      
      // Force the modal to show with a slight delay to ensure state is updated
      setTimeout(() => {
        console.log("Opening scripts modal");
        setShowScriptsModal(true);
      }, 100);
      
      toast({
        title: "Karate Scripts Generated",
        description: jiraStoryId ? `Karate scripts generated for JIRA story ${jiraStoryId}` : "Karate scripts have been generated successfully",
      });
      
    } catch (error) {
      console.error('Error generating Karate scripts:', error);
      toast({
        title: "Error",
        description: "Could not generate Karate scripts. Check your backend configuration and connection.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return {
    generatedScripts,
    isLoading,
    isAutoGenerating,
    showScriptsModal,
    setShowScriptsModal,
    handleAutoGenerateFromJira,
    handleGenerateScripts
  };
}
