
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Bug, Zap, Download, FileText, Send, Upload, X, Eye } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { getToolEndpointUrl, buildPromptWithContext } from "@/config/backendConfig";
import { defaultEndpointConfig } from "@/config/backendConfig";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

interface DefectAnalyzerProps {
  jiraData?: any;
  onConfigOpen: () => void;
}

export function DefectAnalyzer({ jiraData, onConfigOpen }: DefectAnalyzerProps) {
  const [jiraStoryId, setJiraStoryId] = useState("");
  const [analysisResults, setAnalysisResults] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isCreatingJira, setIsCreatingJira] = useState(false);
  const [importedFiles, setImportedFiles] = useState<File[]>([]);
  const [showResultsModal, setShowResultsModal] = useState(false);
  const [isAutoGenerating, setIsAutoGenerating] = useState(false);
  const { toast } = useToast();

  const handleAutoGenerateFromJira = async () => {
    if (!jiraData) {
      toast({
        title: "Error",
        description: "No JIRA data available for auto-analysis.",
        variant: "destructive",
      });
      return;
    }

    setIsAutoGenerating(true);
    try {
      const savedConfig = localStorage.getItem("qaToolsEndpointConfig");
      let config = defaultEndpointConfig;

      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        config = { ...defaultEndpointConfig, ...parsedConfig };
      }

      const jiraEndpointUrl = getToolEndpointUrl("jira-integration", config);

      console.log(`Fetching defect data from JIRA for ${jiraData.id || jiraData.key}`);

      const jiraResponse = await fetch(jiraEndpointUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: "fetchDefectData",
          jiraId: jiraData.id || jiraData.key || '',
          toolId: "defect-analyzer"
        })
      });

      if (!jiraResponse.ok) {
        throw new Error(`JIRA API error! status: ${jiraResponse.status}`);
      }

      const jiraResult = await jiraResponse.json();

      const endpointUrl = getToolEndpointUrl("defect-analyzer", config);
      const enhancedJiraData = {
        ...jiraData,
        defectData: jiraResult.defectData || jiraResult.data || {}
      };

      const prompt = buildPromptWithContext("defect-analyzer",
        `Auto-analyze defects from JIRA issue`,
        enhancedJiraData
      );

      console.log(`Auto-analyzing defects via ${endpointUrl}`);

      const response = await fetch(endpointUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: prompt,
          analysisRequirements: `Auto-generated from JIRA issue: ${jiraData.title || jiraData.summary || ''}`,
          toolId: "defect-analyzer",
          jiraId: jiraData.id || jiraData.key || '',
          jiraData: enhancedJiraData,
          autoGenerated: true
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      setAnalysisResults(result.response || result.analysis || "No analysis results generated");
      setShowResultsModal(true);

      toast({
        title: "Auto-Generated Defect Analysis",
        description: "Defect analysis has been automatically generated",
      });

    } catch (error) {
      console.error('Error auto-analyzing defects from JIRA:', error);
      toast({
        title: "Error",
        description: "Could not auto-analyze defects from JIRA. Check SVC cluster connection.",
        variant: "destructive",
      });
    } finally {
      setIsAutoGenerating(false);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setImportedFiles(prev => [...prev, ...files]);

    toast({
      title: "Files Added",
      description: `${files.length} file(s) added for processing`,
    });
  };

  const removeFile = (index: number) => {
    setImportedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleAnalyzeDefects = async () => {
    if (!jiraStoryId.trim() && importedFiles.length === 0) {
      toast({
        title: "Error",
        description: "Please enter a JIRA Issue ID or import files to analyze defects.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    try {
      const savedConfig = localStorage.getItem("qaToolsEndpointConfig");
      let config = defaultEndpointConfig;

      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        config = { ...defaultEndpointConfig, ...parsedConfig };
      }

      let enhancedJiraData = null;

      if (jiraStoryId.trim()) {
        const jiraEndpointUrl = getToolEndpointUrl("jira-integration", config);

        console.log(`Fetching defect data from JIRA for issue: ${jiraStoryId}`);

        const jiraResponse = await fetch(jiraEndpointUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: "fetchDefectData",
            jiraId: jiraStoryId,
            toolId: "defect-analyzer"
          })
        });

        if (!jiraResponse.ok) {
          throw new Error(`JIRA API error! status: ${jiraResponse.status}`);
        }

        const jiraResult = await jiraResponse.json();

        enhancedJiraData = {
          id: jiraStoryId,
          title: jiraResult.title || jiraResult.summary || `Issue ${jiraStoryId}`,
          description: jiraResult.description || '',
          defectData: jiraResult.defectData || jiraResult.data || {}
        };
      }

      const endpointUrl = getToolEndpointUrl("defect-analyzer", config);
      const prompt = buildPromptWithContext("defect-analyzer",
        jiraStoryId ? `Analyze defects from JIRA issue ${jiraStoryId}` : "Analyze defects from uploaded files",
        enhancedJiraData
      );

      let requestBody;
      let headers: Record<string, string> = {};

      if (importedFiles.length > 0) {
        const formData = new FormData();
        formData.append('prompt', prompt);
        formData.append('analysisRequirements', jiraStoryId ? `JIRA Issue: ${jiraStoryId}` : "From uploaded files");
        formData.append('toolId', "defect-analyzer");

        importedFiles.forEach((file, index) => {
          formData.append(`file_${index}`, file);
        });

        if (enhancedJiraData) {
          formData.append('jiraId', enhancedJiraData.id);
          formData.append('jiraData', JSON.stringify(enhancedJiraData));
        }

        requestBody = formData;
      } else {
        headers['Content-Type'] = 'application/json';
        requestBody = JSON.stringify({
          prompt: prompt,
          analysisRequirements: jiraStoryId ? `JIRA Issue: ${jiraStoryId}` : "Analyze defects",
          toolId: "defect-analyzer",
          jiraId: enhancedJiraData?.id || '',
          jiraData: enhancedJiraData
        });
      }

      const response = await fetch(endpointUrl, {
        method: 'POST',
        headers: headers,
        body: requestBody
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      setAnalysisResults(result.response || result.analysis || "No analysis results generated");
      setShowResultsModal(true);

      toast({
        title: "Defect Analysis Complete",
        description: jiraStoryId ? `Defects analyzed for JIRA issue ${jiraStoryId}` : "Defect analysis completed",
      });

    } catch (error) {
      console.error('Error analyzing defects:', error);
      toast({
        title: "Error",
        description: "Could not analyze defects. Check SVC cluster connection.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const createJiraTicket = async () => {
    if (!analysisResults) {
      toast({
        title: "Error",
        description: "Please analyze defects first.",
        variant: "destructive",
      });
      return;
    }

    setIsCreatingJira(true);
    try {
      const savedConfig = localStorage.getItem("qaToolsEndpointConfig");
      let config = defaultEndpointConfig;

      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        config = { ...defaultEndpointConfig, ...parsedConfig };
      }

      const endpointUrl = getToolEndpointUrl("jira-integration", config);

      const response = await fetch(endpointUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: "createTicket",
          analysis: analysisResults,
          jiraId: jiraData?.id || jiraData?.key || '',
          toolId: "defect-analyzer"
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      toast({
        title: "Jira Ticket Created",
        description: `Analysis ticket created in Jira: ${result.issueKey || 'Success'}`,
      });

    } catch (error) {
      console.error('Error creating Jira ticket:', error);
      toast({
        title: "Error",
        description: "Could not create ticket in Jira. Check configuration.",
        variant: "destructive",
      });
    } finally {
      setIsCreatingJira(false);
    }
  };

  const exportResults = (format: 'txt' | 'json') => {
    if (!analysisResults) {
      toast({
        title: "Error",
        description: "Please analyze defects first.",
        variant: "destructive",
      });
      return;
    }

    let content: string;
    let mimeType: string;
    let filename: string;

    if (format === 'json') {
      const exportData = {
        timestamp: new Date().toISOString(),
        jiraStoryId: jiraStoryId,
        analysisResults: analysisResults,
        jiraData: jiraData
      };
      content = JSON.stringify(exportData, null, 2);
      mimeType = 'application/json';
      filename = `defect-analysis-${Date.now()}.json`;
    } else {
      content = `Defect Analysis Generated on: ${new Date().toLocaleString()}\n\nJIRA Issue ID: ${jiraStoryId}\n\nAnalysis Results:\n${analysisResults}`;
      mimeType = 'text/plain';
      filename = `defect-analysis-${Date.now()}.txt`;
    }

    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Export Complete",
      description: `Analysis results exported as ${format.toUpperCase()} file`,
    });
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center space-x-2">
            <div className="w-6 h-6 bg-red-500 rounded flex items-center justify-center">
              <Bug className="w-4 h-4 text-white" />
            </div>
            <span>Defect Analyzer</span>
            {jiraData && (
              <Badge variant="secondary">Jira: {jiraData.id}</Badge>
            )}
            {importedFiles.length > 0 && (
              <Badge variant="outline">{importedFiles.length} files</Badge>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground mb-4">
            Identify root causes of defects from JIRA issues or uploaded files.
          </p>

          {jiraData && (
            <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="font-medium text-blue-900">Auto-Analyze from JIRA</h4>
                  <p className="text-sm text-blue-700">
                    Automatically fetch defect data from JIRA and analyze root causes
                  </p>
                </div>
                <Button
                  onClick={handleAutoGenerateFromJira}
                  disabled={isAutoGenerating}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {isAutoGenerating ? (
                    <Zap className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Zap className="w-4 h-4 mr-2" />
                  )}
                  {isAutoGenerating ? "Auto-Analyzing..." : "Auto-Analyze Defects"}
                </Button>
              </div>
            </div>
          )}

          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="jira-story-id">JIRA Issue ID</Label>
              <Input
                id="jira-story-id"
                placeholder="Enter JIRA Issue ID (e.g., PROJ-123)"
                value={jiraStoryId}
                onChange={(e) => setJiraStoryId(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="file-upload">Import Files (Optional)</Label>
              <Input
                id="file-upload"
                type="file"
                multiple
                accept=".txt,.md,.json,.xml,.log,.java,.js,.ts,.pdf,.docx,.xlsx"
                onChange={handleFileUpload}
                className="cursor-pointer"
              />
            </div>

            {importedFiles.length > 0 && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Imported Files:</h4>
                <div className="max-h-32 overflow-y-auto space-y-1">
                  {importedFiles.map((file, index) => (
                    <div key={index} className="flex items-center justify-between p-2 bg-muted rounded">
                      <div className="flex items-center space-x-2">
                        <FileText className="w-4 h-4" />
                        <span className="text-sm">{file.name}</span>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeFile(index)}
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="flex gap-2">
              <Button
                onClick={handleAnalyzeDefects}
                disabled={(!jiraStoryId.trim() && importedFiles.length === 0) || isLoading}
                className="flex-1"
              >
                {isLoading ? (
                  <Zap className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <Zap className="w-4 h-4 mr-2" />
                )}
                {isLoading ? "Analyzing..." : "Analyze Defects"}
              </Button>

              {analysisResults && (
                <Button
                  onClick={() => setShowResultsModal(true)}
                  variant="outline"
                >
                  <Eye className="w-4 h-4 mr-2" />
                  View Results
                </Button>
              )}
            </div>

            {analysisResults && (
              <div className="flex gap-2 pt-2">
                <Button
                  onClick={createJiraTicket}
                  disabled={isCreatingJira}
                  variant="outline"
                  className="flex-1"
                >
                  {isCreatingJira ? (
                    <Send className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Send className="w-4 h-4 mr-2" />
                  )}
                  {isCreatingJira ? "Creating in Jira..." : "Create Ticket in Jira"}
                </Button>

                <div className="flex gap-2">
                  <Button onClick={() => exportResults('txt')} variant="outline">
                    <Download className="w-4 h-4 mr-2" />
                    Export TXT
                  </Button>
                  <Button onClick={() => exportResults('json')} variant="outline">
                    <FileText className="w-4 h-4 mr-2" />
                    Export JSON
                  </Button>
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      <Dialog open={showResultsModal} onOpenChange={setShowResultsModal}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <Bug className="w-5 h-5 text-red-600" />
              <span>Defect Analysis Results</span>
              {jiraStoryId && (
                <Badge variant="secondary">JIRA: {jiraStoryId}</Badge>
              )}
            </DialogTitle>
            <DialogDescription>
              Review the AI-generated defect analysis results below.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div className="bg-muted p-4 rounded-lg">
              <pre className="text-sm whitespace-pre-wrap max-h-96 overflow-y-auto">{analysisResults}</pre>
            </div>

            <div className="flex gap-2 justify-end">
              <Button onClick={() => exportResults('txt')} variant="outline">
                <Download className="w-4 h-4 mr-2" />
                Export TXT
              </Button>
              <Button onClick={() => exportResults('json')} variant="outline">
                <FileText className="w-4 h-4 mr-2" />
                Export JSON
              </Button>
              <Button
                onClick={createJiraTicket}
                disabled={isCreatingJira}
                variant="outline"
              >
                {isCreatingJira ? (
                  <Send className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <Send className="w-4 h-4 mr-2" />
                )}
                {isCreatingJira ? "Creating..." : "Create in Jira"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}